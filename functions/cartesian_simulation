include("initialisations.jl")

function check_boundary(ray::Ray,domain::Domain)
    updated_ray = update_ray(ray,domain)
    vel1 = get_velocity(ray,domain)
    vel2 = get_velocity(updated_ray,domain)
    if vel1 != vel2
        return true
    end
end;

function is_in_domain(ray::Ray,domain::Domain)
    position = ray.position
    scaling_factor = domain.scaling_factor
    (nz,nx) = size(domain.domain)./scaling_factor
    (z,x) = position 
    if (0 <= z < nz) && (0 <= x < nx)
        return true 
    else
        return false
    end
end;

function update_ray(ray::Ray,domain::Domain)
    pos = ray.position
    dir = ray.direction
    vel = get_velocity(ray,domain)
    ds = dir.*vel*dt 
    new_pos = pos .+ ds 
    length = ray.length + norm(ds)
    IC = ray.initial_conditions
    a0 = IC.amplitude
    new_amp = a0*sqrt(norm(ds)/length)

    return Ray(new_pos,dir,new_amp,length,IC,"active")
end;

function reflect_ray(ray::Ray,domain::Domain)
    pos = ray.position 
    dir = ray.direction
    amp = ray.amplitude
    n = [1, 0]
    outgoing = dir - 2*dot(dir,n)*n 
    angle = asind(outgoing[2])
    IC = InitialConditions(pos,angle,amp)
    length = 0
    damping = 0.8
    new_amp = amp*damping
    reflected_ray = Ray(pos,outgoing,new_amp,length,IC,"active")
    return reflected_ray
end;

function snells_law(ray::Ray,domain::Domain)
    pos = ray.position
    dir = ray.direction
    amp = ray.amplitude
    vel1 = get_velocity(ray,domain)
    updated_ray = update_ray(ray,domain)
    vel2 = get_velocity(updated_ray,domain)
    (dz,dx) = dir
    hyp = sqrt(dx^2 + dz^2)
    sinθ1 = dx/hyp
    sinθ2 = (vel2/vel1)*sinθ1

    if -1 <= sinθ2 <= 1
        θ2 = asind(sinθ2)
        new_direction = [cosd(θ2)*sign(dir[1]), sind(θ2)]
        length = updated_ray.length
        a0 = ray.initial_conditions.amplitude
        new_pos = updated_ray.position
        new_amp = updated_ray.amplitude
        IC = InitialConditions(new_pos,θ2,a0)
        snells_ray = Ray(new_pos,new_direction,new_amp,length,IC,"active")

        return snells_ray
    end
    return complete_ray(ray)
end;

function compute_ray_simulation(simulation::Simulation)
    parameters = simulation.parameters
    time = parameters.time
    dt = time[2]-time[1]
    domain = simulation.domain
    rays = simulation.rays
    data = simulation.data

    first_ray = rays[1]
    data = save_ray(first_ray,data,1,1)

    for i = 1:size(time)[1]-1
        status = get_active_rays(rays)
        for j = 1:size(status)[1]
            if status[j] == 0
                continue
            end
            ray = rays[j]
            if is_in_domain(ray,domain)
                if check_boundary(ray,domain) == true 
                    empty_indc = get_empty_ray(rays)
                    if !isnothing(empty_indc)
                        reflected_ray = reflect_ray(ray,domain)
                        data = save_ray(reflected_ray,data,empty_indc,i)
                        reflected_ray = update_ray(reflected_ray,domain)
                        data = save_ray(reflected_ray,data,empty_indc,i+1)
                        rays[empty_indc] = reflected_ray
                    end
                    snells_ray = snells_law(ray,domain)
                    data = save_ray(snells_ray,data,j,i+1)
                    rays[j] = snells_ray 
                else
                    updated_ray = update_ray(ray,domain)
                    data = save_ray(updated_ray,data,j,i+1)
                    rays[j] = updated_ray
                end
            else
                completed_ray = complete_ray(ray)
                rays[j] = completed_ray
            end
        end
    end
    return Simulation(parameters,domain,rays,data)
end;



function obtain_wavefronts(simulations::Vector{Simulation})
    time = simulations[1].parameters.time
    nt = size(time,1)
    scaling = 1
    (nz,nx) = Int.(size(simulations[1].domain.domain).*scaling)
    wavefronts = Vector{Wavefront}(undef,nt)    
    for i = 1:nt
        t = time[i]
        snapshot = zeros(nz,nx)
        for j = 1:size(simulations)[1]
            data = simulations[j].data[i,:,:]
            indc = .!isnan.(data)
            data = data[indc]
            if size(data,1) > 0 
                cols = Int(size(data,1)/3)
                data = reshape(data,(3,cols))
                z = Int.(round.(data[1,:].*scaling))
                x = Int.(round.(data[2,:].*scaling))
                amp = data[3,:]
                x = clamp.(x,1,nx)
                z = clamp.(z,1,nz)
                for k = 1:cols
                    if isnan(snapshot[z[k],x[k]])  
                        snapshot[z[k],x[k]] = 0
                    else
                        snapshot[z[k],x[k]] += amp[k]
                    end
                end
            end
        end
        wavefront = Wavefront(snapshot,t)
        wavefronts[i] = wavefront
    end

    return wavefronts
end
